/*!
 * Start Bootstrap - SB Admin 2 v4.1.3 (https://startbootstrap.com/theme/sb-admin-2)
 * Copyright 2013-2021 Start Bootstrap
 * Licensed under MIT (https://github.com/StartBootstrap/startbootstrap-sb-admin-2/blob/master/LICENSE)
 */

!function (l) { "use strict"; l("#sidebarToggle, #sidebarToggleTop").on("click", function (e) { l("body").toggleClass("sidebar-toggled"), l(".sidebar").toggleClass("toggled"), l(".sidebar").hasClass("toggled") && l(".sidebar .collapse").collapse("hide") }), l(window).resize(function () { l(window).width() < 768 && l(".sidebar .collapse").collapse("hide"), l(window).width() < 480 && !l(".sidebar").hasClass("toggled") && (l("body").addClass("sidebar-toggled"), l(".sidebar").addClass("toggled"), l(".sidebar .collapse").collapse("hide")) }), l("body.fixed-nav .sidebar").on("mousewheel DOMMouseScroll wheel", function (e) { var o; 768 < l(window).width() && (o = (o = e.originalEvent).wheelDelta || -o.detail, this.scrollTop += 30 * (o < 0 ? 1 : -1), e.preventDefault()) }), l(document).on("scroll", function () { 100 < l(this).scrollTop() ? l(".scroll-to-top").fadeIn() : l(".scroll-to-top").fadeOut() }), l(document).on("click", "a.scroll-to-top", function (e) { var o = l(this); l("html, body").stop().animate({ scrollTop: l(o.attr("href")).offset().top }, 1e3, "easeInOutExpo"), e.preventDefault() }) }(jQuery);
/**
 * @function
 * fungsi untuk mengenerate id random untuk mengidentifikasi id pada item select
 */
function randstr(len = 8) {
    let chars = "abcdefghijklmnopqrstuvwxyz0123456789".split("");
    let res = "ID";

    for (let i = 0; i < len; i++) {
        res += chars[Math.floor(Math.random() * chars.length)];
    }

    return res;
}

/**
 * @class
 * class NestedSelect
 * cetal biru untuk object nested untuk mengenerate tampilan input select
 */
class NestedSelect {
    constructor({ target, items }) {
        this.target = target;
        this.items = items;
        this.id = randstr();
        this.loaded = false;
    }

    /**
     * @method loadContainer
     * method utama untuk mengenerate tampilan select bercabang
     */
    loadContainer() {
        const { id, target, items, loaded } = this;
        let options = "";
        let currentItems = [];

        /**
         * @describe
         * pengecekan untuk select bercabang sudah di buat tampilan nya atau belum
         */
        if (loaded) return this.unLoadContainer();

        for (let i = 0; i < items.length; i++) {
            let item = items[i];

            window[`nested_#${id}_${i}`] = item.items || [];
            item.items = item.items || [];

            /**
             * @describe
             * pembuatan tampilan element option
             */
            options += `
        <div data-value="${item.value}" class="nested-select-value ${item.items.length > 0 ? "select" : "value"}">
          ${item.label}
          <span class="icon">
            <svg xmlns="http://www.w3.org/2000/svg" height="16" width="10" viewBox="0 0 320 512"><!--!Font Awesome Free 6.5.1 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2024 Fonticons, Inc.--><path d="M278.6 233.4c12.5 12.5 12.5 32.8 0 45.3l-160 160c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3L210.7 256 73.4 118.6c-12.5-12.5-12.5-32.8 0-45.3s32.8-12.5 45.3 0l160 160z"/></svg>
          <span/>
        </div>
      `;
            currentItems.push(item);
        }

        /**
         * @describe
         * pembuatan tampilan elemet select bercabang
         */
        if (document.querySelector(".nested-select-container") === null) {
            target.insertAdjacentHTML(
                "afterend",
                `
          <div class="nested-select-container">
            <div class="nested-select-item" id="${id}">
                ${options}
            </div>
          </div>
      `,
            );
        } else {
            document.querySelector(".nested-select-container").insertAdjacentHTML(
                "beforeend",
                `
        <div class="nested-select-item" id="${id}">
            ${options}
        </div>
      `,
            );
        }

        let childrens = document.querySelectorAll(`#${id} .nested-select-value`);
        childrens.forEach((children, i) => {
            /**
             * @describe
             * menginisiasi ulang untuk membuat tampilan select bercabang
             */
            let nested = new NestedSelect({
                target: target,
                items: window[`nested_#${id}_${i}`],
            });

            /**
             * @describe
             * event listener untuk setiap element option
             */
            children.addEventListener("click", function () {
                let isParentOpened = this.parentElement.querySelector(".active");
                let isActive = this.getAttribute("class").split(" ").includes("active");
                let isThisHasValue = this.getAttribute("class")
                    .split(" ")
                    .includes("value");

                /**
                 * @describe
                 * pengecekan apabila option yang di pilih tidak memiliki subitem lagi
                 */
                if (isThisHasValue) {
                    let parents = this.closest(
                        ".nested-select-container",
                    ).querySelectorAll(".nested-select-value.active");
                    let values = [];

                    parents.forEach((element) => values.push(element.innerText));
                    values.push(this.innerText);

                    /**
                     * @describe
                     * menyimpan hasil value ke dalam input target
                     */
                    target.setAttribute(
                        "value",
                        values.toString().replace(/\,/gm, " › "),
                    );

                    return document.querySelector(".nested-select-container").remove();
                }

                /**
                 * @describe
                 * pengecekan apabila select disorot atau tidak
                 */
                if (isParentOpened) {
                    if (!isActive) return false;
                    else nested.unLoadContainer();
                } else {
                    nested.loadContainer();
                }

                /**
                 * @describe
                 * perubahan class active untuk option yang telah dipilih
                 */
                this.classList.toggle("active");
            });
        });

        this.loaded = true;
    }

    /**
     * @method unLoadContainer
     * untuk mereset tampilan select bercabang
     */
    unLoadContainer() {
        const { id, target } = this;

        if (!document.querySelector(`#${id}`)) {
            this.loaded = false;
            this.loadContainer();
            target.setAttribute("value", "");
            return false;
        }

        document.querySelector(`#${id}`).remove();
        this.loaded = false;
    }

    /**
     * @method init
     * untuk memuat method² utama pada class NestedSelect
     */
    init() {
        this.loadContainer();
    }
}
